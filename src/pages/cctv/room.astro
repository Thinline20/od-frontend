---
import { Icon } from "astro-icon";
import Layout from "~/layouts/Layout.astro";
import AccidentList from "~/components/AccidentList";
import LogList from "~/components/LogList";
import { createFilter } from "~/uitls/django";
import IoStartChart from "~/components/icons/IoStatsChart";
import placeholderImage from "~/assets/placeholder.jpg";
---

<Layout title="Room" useTransition={false}>
  <div slot="header">
    <a
      id="statistics-link"
      href=""
      class="btn btn-ghost flex items-center gap-[6px] capitalize"
    >
      <span class="text-xl">Statistics</span>
      <span class="text-2xl text-primary">
        <IoStartChart />
      </span>
    </a>
  </div>
  <main class="container mx-auto flex h-full justify-center p-8">
    <div class="flex h-full flex-col gap-4">
      <div class="flex flex-col gap-4 lg:grid lg:grid-cols-5">
        <div
          class="col-span-3 aspect-video overflow-hidden rounded-lg bg-base-300"
        >
          <img
            src={placeholderImage.src}
            id="main-img"
            class="image-full h-full w-full"
            transition:name="main-cctv-image"
          />
        </div>
        <!-- statistics -->
        <div class="col-span-2 w-full">
          <div class="grid grid-cols-2 gap-4">
            <div class="flex w-fit flex-col gap-0">
              <h3 class="text-center text-xl">Detected Object</h3>
              <div class="w-full">
                <canvas id="object-count"></canvas>
              </div>
            </div>
            <div class="flex w-fit flex-col gap-0">
              <h3 class="text-center text-xl">A</h3>
              <div class="max-w-[360px]">
                <canvas id="weekly-accidents"></canvas>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="flex flex-col gap-4">
        <div class="grid flex-1 gap-4 md:min-h-[16rem] md:grid-cols-2">
          <div>
            <h3>Log List</h3>
            <LogList client:load />
          </div>
          <div>
            <h3>Accident List</h3>
            <AccidentList client:only="solid" />
          </div>
        </div>
        <div class="flex flex-col gap-4">
          <input
            type="text"
            id="cctv-message-input"
            placeholder="Sent text"
            class="sr-only"
          />
        </div>
      </div>
    </div>
  </main>
  <script>
    import { addLog } from "~/data/log";

    const roomName = new URLSearchParams(window.location.search).get("name");
    const message = "test";

    document.querySelector<HTMLAnchorElement>("#statistics-link")!.href =
      "/cctv/statistics?name=" + roomName;

    // const cctvSocket = new WebSocket(
    //   "ws://" + window.location.host + "/ws/cctv/" + roomName + "/",
    // );

    // // Set the log data to the textarea and set the video frames to the cctv-image
    // cctvSocket.onmessage = function (e) {
    //   const data = JSON.parse(e.data);

    //   document.querySelector<HTMLTextAreaElement>("#accident-log")!.value =
    //     data.message;
    //   document.querySelector<HTMLImageElement>("#main-img")!.src =
    //     "data:image/png;base64," + data.frame;

    //   updateLogList(data, sharedLogList);
    //   updateLogList(data, sharedAccidentList);
    // };

    let logNo = 0;
    let accidentNo = 0;
    setInterval(() => {
      // cctvSocket.send(
      //   JSON.stringify({
      //     status: "active",
      //   }),
      // );
      addLog("log", logNo++);
      addLog("accident", accidentNo++);
    }, 1000);
  </script>
  <script>
    import Chart from "chart.js/auto";
    import { type ChartItem, type ChartConfiguration } from "chart.js";

    const getRandom = () => Math.floor(Math.random() * 100);

    function changeDataset(
      chart: Chart,
      dataset: Array<number>,
      animation = false,
    ) {
      chart.data.datasets[0].data = dataset;

      if (animation) {
        chart.update();
      } else {
        chart.update("none");
      }
    }

    var barchartOptions: ChartConfiguration = {
      type: "bar",
      data: {
        labels: ["Car", "Truck", "Bus", "Bike"],
        datasets: [
          {
            data: [0, 0, 0, 0],
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
            suggestedMax: 100,
          },
        },
        plugins: {
          legend: {
            // display: false,
          },
        },
      },
    };

    if (document.getElementById("object-count")) {
      const objectCountChart = new Chart(
        document.getElementById("object-count") as ChartItem,
        barchartOptions,
      );

      setInterval(() => {
        changeDataset(
          objectCountChart,
          [getRandom(), getRandom(), getRandom(), getRandom()],
          false,
        );
      }, 500);
    }

    let doughnutChartOptions: ChartConfiguration = {
      type: "doughnut",
      data: {
        labels: ["Car", "Truck", "Bus", "Bike"],
        datasets: [
          {
            data: [0, 0, 0, 0],
          },
        ],
      },
      options: {
        plugins: {
          legend: {},
        },
      },
    };

    if (document.getElementById("weekly-accidents")) {
      const doughnutChart = new Chart(
        document.getElementById("weekly-accidents") as ChartItem,
        doughnutChartOptions,
      );

      setInterval(() => {
        changeDataset(
          doughnutChart,
          [getRandom(), getRandom(), getRandom(), getRandom()],
          false,
        );
      }, 500);
    }
  </script>
</Layout>
