---
import { Icon } from "astro-icon";
import Layout from "~/layouts/Layout.astro";
import AccidentList from "~/components/AccidentList";
import LogList from "~/components/LogList";
import { createFilter } from "~/utils/django";
import IoStartChart from "~/components/icons/IoStatsChart";
import placeholderImage from "~/assets/placeholder.jpg";
---

<Layout title="Room" useTransition={false}>
  <div slot="header">
    <a
      id="statistics-link"
      href=""
      class="btn btn-ghost flex items-center gap-[6px] capitalize"
    >
      <span class="text-xl">Statistics</span>
      <span class="text-2xl text-primary">
        <IoStartChart />
      </span>
    </a>
  </div>
  <main class="container mx-auto flex h-full justify-center p-8">
    <div class="flex h-full flex-col gap-4 lg:gap-8">
      <div class="flex flex-col gap-4 lg:grid lg:grid-cols-5">
        <div
          class="col-span-3 grid aspect-video place-items-center overflow-hidden rounded-lg bg-base-300"
        >
          <img
            src={placeholderImage.src}
            id="main-img"
            class="image-full sr-only h-full w-full"
            transition:name="main-cctv-image"
          />
          <div id="image-loading" class="loading loading-dots w-[60px]"></div>
        </div>
        <!-- statistics -->
        <div class="col-span-2 w-full">
          <div class="grid grid-cols-2 gap-4">
            <div class="flex w-fit flex-col">
              <h3 class="text-center text-xl">Detected Object</h3>
              <div class="w-full">
                <canvas id="object-count"></canvas>
              </div>
            </div>
            <div class="flex w-fit flex-col">
              <h3 class="text-center text-xl">Hourly Traffic</h3>
              <div class="max-w-[360px]">
                <canvas id="hourly-traffic"></canvas>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="flex flex-col gap-4">
        <div
          class="grid flex-1 gap-4 md:min-h-[16rem] md:grid-cols-[1fr,auto,1fr]"
        >
          <div class="flex flex-col gap-2 rounded-lg border-2 p-4">
            <div>
              <h3 class="text-lg font-bold capitalize tracking-wide">
                Daily traffic
              </h3>
              <p class="text-slate-500">Daily traffic count</p>
            </div>
            <canvas id="daily-stat"></canvas>
          </div>
          <div class="divider md:divider-horizontal"></div>
          <div class="flex flex-col gap-2 rounded-lg border-2 p-4">
            <div>
              <h3 class="text-lg font-bold capitalize tracking-wide">
                Accident List
              </h3>
              <p class="text-slate-500">List of accidents</p>
            </div>
            <AccidentList client:only="solid" />
          </div>
        </div>
        <div class="flex flex-col gap-4">
          <input
            type="text"
            id="cctv-message-input"
            placeholder="Sent text"
            class="sr-only"
          />
        </div>
      </div>
    </div>
  </main>
  <script>
    import Chart from "chart.js/auto";
    import { type ChartItem, type ChartConfiguration } from "chart.js";
    import {
      addLog,
      addAccident,
      type LogType,
      type AccidentType,
    } from "~/data/log";

    const today = new Date();

    const cctvId = new URLSearchParams(window.location.search).get("name");
    const READY_MESSAGE = "ready";
    const ACTIVE_MESSAGE = "active";
    const location = "서울";
    let cctvMetaData;
    let isActive = false;
    let previousHour = today.getHours();
    let hourlyStat = [0, 0, 0, 0, 0];
    let dailyStat = Array.from({ length: 5 }, () =>
      Array.from({ length: 24 }, () => 0),
    );

    /*
     * Define Charts
     */

    const imageLoading = document.getElementById("image-loading");
    const mainImage = document.querySelector<HTMLImageElement>("#main-img");

    const objectCountChartOptions: ChartConfiguration = {
      type: "bar",
      data: {
        labels: ["Car", "Truck", "Bus", "Bike", "Person"],
        datasets: [
          {
            data: [0, 0, 0, 0, 0],
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
            suggestedMax: 20,
          },
        },
        plugins: {
          legend: {
            display: false,
          },
        },
      },
    };

    const objectCountChart = new Chart(
      document.getElementById("object-count") as ChartItem,
      objectCountChartOptions,
    );

    const hourlyChartOptions: ChartConfiguration = {
      type: "pie",
      data: {
        labels: ["Car", "Truck", "Bus", "Bike", "Person"],
        datasets: [
          {
            data: [0, 0, 0, 0, 0],
          },
        ],
      },
      options: {
        plugins: {
          legend: {},
        },
      },
    };

    const hourlyChart = new Chart(
      document.getElementById("hourly-traffic") as ChartItem,
      hourlyChartOptions,
    );

    const dailyChartOptions: ChartConfiguration = {
      type: "line",
      data: {
        labels: Array.from({ length: 24 }, (_, i) =>
          ((i + previousHour + 1) % 24).toString().padStart(2, "0"),
        ),
        datasets: [
          {
            data: Array.from({ length: 24 }, () => 0),
            label: "Car",
          },
          {
            data: Array.from({ length: 24 }, () => 0),
            label: "Truck",
          },
          {
            data: Array.from({ length: 24 }, () => 0),
            label: "Bus",
          },
          {
            data: Array.from({ length: 24 }, () => 0),
            label: "Bike",
          },
          {
            data: Array.from({ length: 24 }, () => 0),
            label: "Person",
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
            suggestedMax: 10000,
          },
        },
      },
    };

    const dailyChart = new Chart(
      document.getElementById("daily-stat") as ChartItem,
      dailyChartOptions,
    );

    /*
     * Main logic
     */

    const cctvSocket = new WebSocket(
      "ws://" + window.location.host + "/ws/cctv/" + cctvId + "/",
    );

    document.querySelector<HTMLAnchorElement>("#statistics-link")!.href =
      "/statistics?cctv=" + cctvId;

    waitForCCTVSocket(cctvSocket);

    // Set the log data to the textarea and set the video frames to the cctv-image
    cctvSocket.onmessage = function (e) {
      const data = JSON.parse(e.data);

      if (data === null) {
        return;
      }

      if (!isActive) {
        isActive = true;
        mainImage?.classList.remove("sr-only");
        imageLoading?.remove();
      }

      mainImage!.src = "data:image/png;base64," + data.frame;

      const parsedLog = JSON.parse(data.object_detection);

      const tempLog = {
        log: parsedLog,
        location: location,
        time: data.detect_time,
      } satisfies LogType;

      addLog(tempLog);

      const car = parsedLog.car ?? 0;
      const truck = parsedLog.truck ?? 0;
      const bus = parsedLog.bus ?? 0;
      const bike = parsedLog.bike ?? 0;
      const person = parsedLog.person ?? 0;

      updateChart(objectCountChart, [car, truck, bus, bike, person], false);

      if (data.accident_detection !== null) {
        const tempAccident = {
          log: JSON.parse(data.accident_detection),
          location: location,
          time: data.detect_time,
        } satisfies AccidentType;

        addAccident(tempAccident);
      }

      if (data.ok === null) {
        return;
      }

      const date = new Date(data.detect_time);

      if (date.getHours() != previousHour) {
        previousHour = date.getHours();
        dailyStat.forEach((value, index) => {
          value.shift();
          value.push(hourlyStat[index]);
          updateChart(dailyChart, value, false, index);
        });
        dailyChart.data.labels?.shift();
        dailyChart.data.labels?.push(previousHour.toString().padStart(2, "0"));
        hourlyStat = [0, 0, 0, 0, 0];
      }

      hourlyStat[0] += car;
      hourlyStat[1] += truck;
      hourlyStat[2] += bus;
      hourlyStat[3] += bike;
      hourlyStat[4] += person;

      updateChart(hourlyChart, hourlyStat, false);

      sendMessage(cctvSocket, ACTIVE_MESSAGE);
    };

    /**
     * Wait for the socket to be ready
     * @param socket Target socket
     */
    function waitForCCTVSocket(socket: WebSocket) {
      setTimeout(() => {
        if (cctvSocket.readyState === 1) {
          console.log("Socket ready");

          // waitForCCTVMetadata(socket)

          sendMessage(socket, ACTIVE_MESSAGE);
        } else {
          console.log("Waiting...");
          waitForCCTVSocket(socket);
        }
      }, 500);
    }

    /**
     * Wait for the server to send CCTV metadata
     * @param socket Target socket
     */
    function waitForCCTVMetadata(socket: WebSocket) {
      sendMessage(socket, READY_MESSAGE);

      socket.onmessage = function (event) {
        cctvMetaData = JSON.parse(event.data);
      };
    }

    /**
     * Send message to the socket with data `{ message: message }`
     * @param socket Target socket
     * @param message Message that will be sent to the target socket
     */
    function sendMessage(socket: WebSocket, message: string) {
      socket.send(
        JSON.stringify({
          message: message,
        }),
      );
    }

    /**
     * Update the chart with the given data
     * @param chart Target chart
     * @param dataset List of data
     * @param animation Default: false
     */
    function updateChart(
      chart: Chart,
      dataset: Array<number>,
      animation = false,
      target = 0,
    ) {
      chart.data.datasets[target].data = dataset;

      if (animation) {
        chart.update();
      } else {
        chart.update("none");
      }
    }

    // test()

    function test() {
      setTimeout(() => {
        mainImage?.classList.remove("sr-only");
        imageLoading?.remove();
        inner();
      }, 1000);

      function inner() {
        setInterval(() => {
          const tempLog = {
            log: {
              person: 1,
              car: 2,
            },
            location: location,
            time: "2023-10-28 22:25:17",
          } satisfies LogType;

          const tempAccident = {
            log: {
              severe: 2,
              moderate: 1,
            },
            location: location,
            time: "2023-10-28 22:25:17",
          } satisfies AccidentType;

          addLog(tempLog);
          addAccident(tempAccident);

          updateChart(
            objectCountChart,
            [
              tempLog.log.car ?? 0,
              tempLog.log.truck ?? 0,
              tempLog.log.bus ?? 0,
              tempLog.log.bike ?? 0,
              tempLog.log.person ?? 0,
            ],
            true,
          );

          hourlyStat[0] += tempLog.log.car ?? 0;
          hourlyStat[1] += tempLog.log.truck ?? 0;
          hourlyStat[2] += tempLog.log.bus ?? 0;
          hourlyStat[3] += tempLog.log.bike ?? 0;
          hourlyStat[4] += tempLog.log.person ?? 0;

          const date = new Date();

          if (true) {
            previousHour = date.getHours();
            dailyStat.forEach((value, index) => {
              value.shift();
              value.push(hourlyStat[index]);
              updateChart(dailyChart, value, false, index);
            });
            dailyChart.data.labels?.shift();
            dailyChart.data.labels?.push(
              previousHour.toString().padStart(2, "0"),
            );
            hourlyStat = [0, 0, 0, 0, 0];
          }

          updateChart(hourlyChart, hourlyStat, true);
        }, 1000);
      }
    }
  </script>
</Layout>
 ~/utils/django
