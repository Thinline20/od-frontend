---
import { Icon } from "astro-icon";
import Layout from "~/layouts/Layout.astro";
import AccidentList from "~/components/AccidentList";
import LogList from "~/components/LogList";
import { createFilter } from "~/uitls/django";
import IoStartChart from "~/components/icons/IoStatsChart";
import placeholderImage from "~/assets/placeholder.jpg";
---

<Layout title="Room" useTransition={false}>
  <div slot="header">
    <a
      id="statistics-link"
      href=""
      class="btn btn-ghost flex items-center gap-[6px] capitalize"
    >
      <span class="text-xl">Statistics</span>
      <span class="text-2xl text-primary">
        <IoStartChart />
      </span>
    </a>
  </div>
  <main class="container mx-auto flex h-full justify-center p-8">
    <div class="flex h-full flex-col gap-4 lg:gap-8">
      <div class="flex flex-col gap-4 lg:grid lg:grid-cols-5">
        <div
          class="col-span-3 aspect-video overflow-hidden rounded-lg bg-base-300"
        >
          <img
            src={placeholderImage.src}
            id="main-img"
            class="image-full h-full w-full"
            transition:name="main-cctv-image"
          />
        </div>
        <!-- statistics -->
        <div class="col-span-2 w-full">
          <div class="grid grid-cols-2 gap-4">
            <div class="flex w-fit flex-col gap-0">
              <h3 class="text-center text-xl">Detected Object</h3>
              <div class="w-full">
                <canvas id="object-count"></canvas>
              </div>
            </div>
            <div class="flex w-fit flex-col gap-0">
              <h3 class="text-center text-xl">Daily Traffic</h3>
              <div class="max-w-[360px]">
                <canvas id="weekly-accidents"></canvas>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div class="flex flex-col gap-4">
        <div
          class="grid flex-1 gap-4 md:min-h-[16rem] md:grid-cols-[1fr,auto,1fr]"
        >
          <div class="flex flex-col gap-1 rounded-lg border-2 p-4">
            <h3 class="text-lg font-bold capitalize tracking-wide">Log List</h3>
            <p class="text-slate-500">List of detected objects</p>
            <LogList client:load />
          </div>
          <div class="divider md:divider-horizontal"></div>
          <div class="flex flex-col gap-1 rounded-lg border-2 p-4">
            <h3 class="text-lg font-bold capitalize tracking-wide">
              Accident List
            </h3>
            <p class="text-slate-500">List of accidents</p>
            <AccidentList client:only="solid" />
          </div>
        </div>
        <div class="flex flex-col gap-4">
          <input
            type="text"
            id="cctv-message-input"
            placeholder="Sent text"
            class="sr-only"
          />
        </div>
      </div>
    </div>
  </main>
  <script>
    import Chart from "chart.js/auto";
    import { type ChartItem, type ChartConfiguration } from "chart.js";
    import {
      addLog,
      addAccident,
      type LogType,
      type AccidentType,
    } from "~/data/log";

    const roomName = new URLSearchParams(window.location.search).get("name");
    const message = "active";
    const location = "서울";

    document.querySelector<HTMLAnchorElement>("#statistics-link")!.href =
      "/cctv/statistics?name=" + roomName;

    var barchartOptions: ChartConfiguration = {
      type: "bar",
      data: {
        labels: ["Car", "Truck", "Bus", "Bike", "Person"],
        datasets: [
          {
            data: [0, 0, 0, 0],
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
            suggestedMax: 50,
          },
        },
        plugins: {
          legend: {
            display: false,
          },
        },
      },
    };

    const objectCountChart = new Chart(
      document.getElementById("object-count") as ChartItem,
      barchartOptions,
    );

    function updateChart(
      chart: Chart,
      dataset: Array<number>,
      animation = false,
    ) {
      chart.data.datasets[0].data = dataset;

      if (animation) {
        chart.update();
      } else {
        chart.update("none");
      }
    }

    let dailyStat = [0, 0, 0, 0, 0];

    let dailyChartOptions: ChartConfiguration = {
      type: "doughnut",
      data: {
        labels: ["Car", "Truck", "Bus", "Bike", "Person"],
        datasets: [
          {
            data: [0, 0, 0, 0, 0],
          },
        ],
      },
      options: {
        plugins: {
          legend: {},
        },
      },
    };

    const dailyChart = new Chart(
      document.getElementById("weekly-accidents") as ChartItem,
      dailyChartOptions,
    );

    const cctvSocket = new WebSocket(
      "ws://" + window.location.host + "/ws/cctv/" + roomName + "/",
    );

    // Set the log data to the textarea and set the video frames to the cctv-image
    cctvSocket.onmessage = function (e) {
      const data = JSON.parse(e.data);

      document.querySelector<HTMLImageElement>("#main-img")!.src =
        "data:image/png;base64," + data.frame;

      const tempLog = {
        log: data.message,
        location: location,
        time: data.detect_time,
      } satisfies LogType;

      addLog(tempLog);

      let car = data.car ?? 0;
      let truck = data.truck ?? 0;
      let bus = data.bus ?? 0;
      let bike = data.bike ?? 0;
      let person = data.person ?? 0;

      updateChart(objectCountChart, [car, truck, bus, bike, person], true);

      dailyStat[0] += car;
      dailyStat[1] += truck;
      dailyStat[2] += bus;
      dailyStat[3] += bike;
      dailyStat[4] += person;

      updateChart(dailyChart, dailyStat, true);

      if (data.accident_detection !== null) {
        const tempAccident = {
          log: data.accident_detection,
          location: location,
          time: data.accident_detection.time,
        } satisfies AccidentType;

        addAccident(tempAccident);
      }

      if (data.ok !== null) {
        cctvSocket.send(
          JSON.stringify({
            status: "active",
          }),
        );
      }
    };

    setInterval(() => {
      const tempLog = {
        log: {
          person: 1,
          car: 2,
        },
        location: location,
        time: "2023-10-28 22:25:17",
      } satisfies LogType;
      const tempAccident = {
        log: {
          severe: 2,
          moderate: 1,
        },
        location: location,
        time: "2023-10-28 22:25:17",
      } satisfies AccidentType;

      addLog(tempLog);
      addAccident(tempAccident);
      updateChart(
        objectCountChart,
        [
          tempLog.log.car ?? 0,
          tempLog.log.truck ?? 0,
          tempLog.log.bus ?? 0,
          tempLog.log.bike ?? 0,
          tempLog.log.person ?? 0,
        ],
        true,
      );

      dailyStat[0] += tempLog.log.car ?? 0;
      dailyStat[1] += tempLog.log.truck ?? 0;
      dailyStat[2] += tempLog.log.bus ?? 0;
      dailyStat[3] += tempLog.log.bike ?? 0;
      dailyStat[4] += tempLog.log.person ?? 0;

      updateChart(dailyChart, dailyStat, true);
    }, 1000);
  </script>
  <script></script>
</Layout>
