---
import Layout from "~/layouts/Layout.astro";
import { createFilter } from "~/uitls/django";

import placeholderImage from "~/assets/placeholder.jpg";
---

<Layout title="Room" useTransition={false}>
  <main class="container mx-auto h-full p-4">
    <div class="flex h-full flex-col gap-4">
      <div class="flex flex-col gap-4 lg:grid lg:grid-cols-5">
        <div
          class="col-span-3 aspect-video overflow-hidden rounded-lg bg-base-300"
        >
          <img
            src={placeholderImage.src}
            id="main-img"
            class="image-full h-full w-full"
            transition:name="main-cctv-image"
          />
        </div>
        <div class="col-span-2 grid gap-4">
          <textarea
            id="chat-loddg"
            readonly
            class="textarea textarea-bordered min-h-[16rem] w-full resize-none lg:min-h-0"
          ></textarea>
          <div class="flex flex-col gap-4">
            <input
              type="text"
              id="chat-message-input"
              placeholder="Sent text"
              class="input input-bordered flex-1"
            />
            <div class="flex justify-end gap-2">
              <button id="chat-clear" class="btn btn-outline">Clear</button>
              <input
                id="chat-message-submit"
                type="button"
                value="Send"
                class="btn btn-primary btn-outline"
              />
            </div>
          </div>
        </div>
      </div>
      <!-- statistics -->
      <div class="container h-full">
        <div class="flex gap-4">
          <div class="flex w-fit flex-col gap-0">
            <h3 class="text-center text-xl">Detected Object</h3>
            <div class="h-[360px] w-[480px]">
              <canvas id="object-count"></canvas>
            </div>
          </div>
          <div class="flex w-fit flex-col gap-0">
            <h3 class="">A</h3>
            <div class="h-[360px] w-[480px]">
              <canvas id="weekly-accidents"></canvas>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
  <script>
    const mainImg = document.querySelector("#main-img");

    document.querySelector("#chat-clear").onclick = function () {
      document.querySelector("#chat-message-input").value = "";
    };

    const roomName = JSON.parse(
      document.getElementById("room-name").textContent,
    );

    const chatSocket = new WebSocket(
      "ws://" + window.location.host + "/ws/chat/" + roomName + "/",
    );

    chatSocket.onmessage = function (e) {
      const data = JSON.parse(e.data);
      // document.querySelector("#chat-log").value += data.message + "\n";
      document.querySelector("#chat-log").value = data.message;
      mainImg.src = "data:image/png;base64," + data.frame;
    };

    chatSocket.onclose = function (e) {
      console.error("Chat socket closed unexpectedly");
    };

    document.querySelector("#chat-message-input").focus();
    document.querySelector("#chat-message-input").onkeyup = function (e) {
      if (e.key === "Enter") {
        // enter, return
        document.querySelector("#chat-message-submit").click();
      }
    };

    document.querySelector("#chat-message-submit").onclick = function (e) {
      const messageInputDom = document.querySelector("#chat-message-input");
      console.log(messageInputDom.value);
      const message = messageInputDom.value;
      chatSocket.send(
        JSON.stringify({
          message: message,
        }),
      );
      messageInputDom.value = "";
    };
  </script>
  <script>
    import Chart from "chart.js/auto";

    const getRandom = () => Math.floor(Math.random() * 100);

    function changeDataset(chart: Chart, dataset: [], animation = false) {
      chart.data.datasets[0].data = dataset;

      if (animation) {
        chart.update();
      } else {
        chart.update("none");
      }
    }

    var barchartOptions = {
      type: "bar",
      data: {
        labels: ["Car", "Truck", "Bus", "Bike"],
        datasets: [
          {
            data: [0, 0, 0, 0],
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
            suggestedMax: 100,
          },
        },
        plugins: {
          legend: {
            // display: false,
          },
        },
      },
    };

    if (document.getElementById("object-count")) {
      const objectCountChart = new Chart(
        document.getElementById("object-count"),
        barchartOptions,
      );

      setInterval(() => {
        changeDataset(
          objectCountChart,
          [getRandom(), getRandom(), getRandom(), getRandom()],
          false,
        );
      }, 500);
    }

    let doughnutChartOptions = {
      type: "doughnut",
      data: {
        labels: ["Car", "Truck", "Bus", "Bike"],
        datasets: [
          {
            data: [0, 0, 0, 0],
          },
        ],
      },
      options: {
        plugins: {
          legend: {
          },
        },
      },
    };

    if (document.getElementById("weekly-accidents")) {
      const doughnutChart = new Chart(
        document.getElementById("weekly-accidents"),
        doughnutChartOptions,
      );

      setInterval(() => {
        changeDataset(
          doughnutChart,
          [getRandom(), getRandom(), getRandom(), getRandom()],
          false,
        );
      }, 500);
    }
  </script>
</Layout>
