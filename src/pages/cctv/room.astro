---
import Layout from "~/layouts/Layout.astro";
import { createFilter } from "~/uitls/django";

import placeholderImage from "~/assets/placeholder.jpg";
---

<Layout title="Room" useTransition={false}>
  <main class="container flex h-full justify-center p-8">
    <div class="flex h-full flex-col gap-4">
      <div class="flex flex-col gap-4 lg:grid lg:grid-cols-5">
        <div
          class="col-span-3 aspect-video overflow-hidden rounded-lg bg-base-300"
        >
          <img
            src={placeholderImage.src}
            id="main-img"
            class="image-full h-full w-full"
            transition:name="main-cctv-image"
          />
        </div>
        <div class="col-span-2 flex flex-col gap-4">
          <textarea
            id="cctv-log"
            readonly
            class="textarea textarea-bordered min-h-[16rem] flex-1 resize-none lg:min-h-0"
          ></textarea>
          <div class="flex flex-col gap-4">
            <input
              type="text"
              id="cctv-message-input"
              placeholder="Sent text"
              class="sr-only"
            />
            <div class="flex justify-end gap-2">
              <input
                id="cctv-message-submit"
                type="button"
                value="Send"
                class="btn btn-primary btn-outline"
              />
            </div>
          </div>
        </div>
      </div>
      <!-- statistics -->
      <div class="w-fit">
        <div class="flex gap-4">
          <div class="flex w-fit flex-col gap-0">
            <h3 class="text-center text-xl">Detected Object</h3>
            <div class="h-[360px] w-[480px]">
              <canvas id="object-count"></canvas>
            </div>
          </div>
          <div class="flex w-fit flex-col gap-0">
            <h3 class="text-center text-xl">A</h3>
            <div class="h-[360px] w-[360px]">
              <canvas id="weekly-accidents"></canvas>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>
  <script is:inline>
  const mainImg = document.querySelector("#main-img");

  document.querySelector("#cctv-clear").onclick = function () {
    document.querySelector("#cctv-message-input").value = "";
  };

  const roomName = new URLSearchParams(window.location.search).get("name");

  cctvSocket.onmessage = function (e) {
    const data = JSON.parse(e.data);
    // document.querySelector("#cctv-log").value += data.message + "\n";
    document.querySelector("#cctv-log").value = data.message;
    mainImg.src = "data:image/png;base64," + data.frame;
  };

  document.querySelector("#cctv-message-submit").onclick = function (e) {
    cctvSocket.send(
      JSON.stringify({
        message: "test",
      }),
    );
  };
  </script>
  <script>
    import Chart from "chart.js/auto";
    import { type ChartItem, type ChartConfiguration } from "chart.js";

    const getRandom = () => Math.floor(Math.random() * 100);

    function changeDataset(
      chart: Chart,
      dataset: Array<number>,
      animation = false,
    ) {
      chart.data.datasets[0].data = dataset;

      if (animation) {
        chart.update();
      } else {
        chart.update("none");
      }
    }

    var barchartOptions: ChartConfiguration = {
      type: "bar",
      data: {
        labels: ["Car", "Truck", "Bus", "Bike"],
        datasets: [
          {
            data: [0, 0, 0, 0],
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
            suggestedMax: 100,
          },
        },
        plugins: {
          legend: {
            // display: false,
          },
        },
      },
    };

    if (document.getElementById("object-count")) {
      const objectCountChart = new Chart(
        document.getElementById("object-count") as ChartItem,
        barchartOptions,
      );

      setInterval(() => {
        changeDataset(
          objectCountChart,
          [getRandom(), getRandom(), getRandom(), getRandom()],
          false,
        );
      }, 500);
    }

    let doughnutChartOptions: ChartConfiguration = {
      type: "doughnut",
      data: {
        labels: ["Car", "Truck", "Bus", "Bike"],
        datasets: [
          {
            data: [0, 0, 0, 0],
          },
        ],
      },
      options: {
        plugins: {
          legend: {},
        },
      },
    };

    if (document.getElementById("weekly-accidents")) {
      const doughnutChart = new Chart(
        document.getElementById("weekly-accidents") as ChartItem,
        doughnutChartOptions,
      );

      setInterval(() => {
        changeDataset(
          doughnutChart,
          [getRandom(), getRandom(), getRandom(), getRandom()],
          false,
        );
      }, 500);
    }
  </script>
</Layout>
