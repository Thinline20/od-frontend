---
import Layout from "~/layouts/Layout.astro";
import BiSolidCctv from "~/components/icons/BiSolidCctv";
import BsLayoutTextSidebar from "~/components/icons/BsLayoutTextSidebar";
---

<Layout title="Statistics">
  <div slot="header" class="flex gap-2 md:gap-4">
    <a
      id="return-link"
      href=""
      class="btn btn-ghost flex items-center gap-[6px] capitalize"
    >
      <span class="text-lg md:text-xl">Return to CCTV</span>
      <span class="text-xl text-primary md:text-2xl">
        <BiSolidCctv />
      </span>
    </a>
    <div class="flex items-center">
      <label class="btn btn-ghost drawer-button 2xl:invisible 2xl:hidden">
        <input type="checkbox" class="drawer-toggle" />
        <span class="text-lg md:text-xl">
          <BsLayoutTextSidebar />
        </span>
      </label>
    </div>
  </div>
  <main class="container mx-auto h-full p-6 2xl:px-0 2xl:py-8">
    <div class="drawer 2xl:drawer-open">
      <input id="drawer-toggle" type="checkbox" class="drawer-toggle" />
      <div class="drawer-content lg:px-8">
        <div class="flex flex-wrap items-center">
          <div class="flex w-full justify-between">
            <h2 class="mb-4 text-xl font-bold text-gray-800">Detection Stat</h2>
            <div>
              <form action="/statistics/date" method="get" id="date-form">
                <div class="flex gap-4">
                  <input
                    type="date"
                    name="dateFrom"
                    id="date-from"
                    class="input input-bordered transition-colors duration-75"
                  />
                  <input
                    type="date"
                    name="dateTo"
                    id="date-to"
                    class="input input-bordered"
                  />
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
      <div class="drawer-side">
        <label
          for="drawer-toggle"
          aria-label="close sidebar"
          class="drawer-overlay"
        >
        </label>
        <div class="h-full w-48 bg-base-200 py-2 2xl:rounded-tr-lg">
          <ul class="menu rounded-box gap-1">
            <li class="font-bold">
              <button id="cctv-1" class="cctv-button">CCTV 1</button>
            </li>
            <li class="font-bold">
              <button id="cctv-2" class="cctv-button">CCTV 2</button>
            </li>
            <li class="font-bold">
              <button id="cctv-3" class="cctv-button">CCTV 3</button>
            </li>
            <li class="font-bold">
              <button id="cctv-4" class="cctv-button">CCTV 4</button>
            </li>
            <li class="font-bold">
              <button id="cctv-5" class="cctv-button">CCTV 5</button>
            </li>
            <li class="font-bold">
              <button id="cctv-6" class="cctv-button">CCTV 6</button>
            </li>
          </ul>
        </div>
      </div>
    </div>
  </main>
  <script>
    import { Chart } from "chart.js";

    let cctvId = new URLSearchParams(window.location.search).get("cctv");
    let dateFrom: Date;
    let dateTo: Date;

    if (cctvId === null) {
      cctvId = "1";
      window.location.href = `${window.location.protocol}//${window.location.host}/statistics?cctv=${cctvId}`;
    }

    document.getElementById(`cctv-${cctvId}`)?.classList.add("active");

    document.querySelector<HTMLAnchorElement>(
      "#return-link",
    )!.href = `/cctv/room?name=${cctvId}`;

    document
      .querySelectorAll<HTMLButtonElement>(".cctv-button")
      .forEach((element) => {
        if (element.id == `cctv-${cctvId}`) {
          return;
        }

        const targetCCTV = element.id.at(-1);

        element.addEventListener("click", () => {
          window.location.href = `${window.location.protocol}//${window.location.host}/statistics?cctv=${targetCCTV}`;
        });
      });

    document.querySelectorAll<HTMLInputElement>(".drawer-toggle").forEach((e) =>
      e.addEventListener("change", (event) => {
        document
          .querySelectorAll<HTMLInputElement>(".drawer-toggle")
          .forEach((inner) => {
            inner.checked = e.checked;
          });
      }),
    );

    const dateFromElement =
      document.querySelector<HTMLInputElement>("#date-from");
    const dateToElement = document.querySelector<HTMLInputElement>("#date-to");
    const dateForm = document.querySelector<HTMLFormElement>("#date-form");

    dateFromElement?.addEventListener("change", (event) => {
      const target = event.target as HTMLInputElement;
      const newDate = new Date(target.value);
      dateToElement?.classList.remove("input-error");

      if (checkDate(newDate, dateTo)) {
        dateFrom = newDate;
        dateFromElement.classList.remove("input-error");

        onDateFormChange();
      } else {
        dateFromElement.value = dateFrom
          ? dateFrom.toISOString().split("T")[0]
          : "";
        dateFromElement.classList.add("input-error");
      }
    });

    dateToElement?.addEventListener("change", (event) => {
      const target = event.target as HTMLInputElement;
      const newDate = new Date(target.value);
      dateFromElement?.classList.remove("input-error");

      if (checkDate(dateFrom, newDate)) {
        dateTo = newDate;
        dateToElement.classList.remove("input-error");

        onDateFormChange();
      } else {
        dateToElement.value = dateTo ? dateTo.toISOString().split("T")[0] : "";
        dateToElement.classList.add("input-error");
      }
    });

    function checkDate(from: Date, to: Date) {
      if (from > to) {
        return false;
      }

      return true;
    }

    function onDateFormChange() {
      if (dateFrom !== undefined && dateTo !== undefined) {
        // dateForm?.submit();
      }
    }
  </script>
</Layout>
