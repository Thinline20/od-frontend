---
import Layout from "~/layouts/Layout.astro";
import BiSolidCctv from "~/components/icons/BiSolidCctv";
import BsLayoutTextSidebar from "~/components/icons/BsLayoutTextSidebar";
---

<Layout title="Statistics">
  <div slot="header" class="flex gap-1">
    <a
      id="return-link"
      href=""
      class="btn btn-ghost flex items-center capitalize"
    >
      <span class="text-lg md:text-xl">Return to CCTV</span>
      <span class="text-xl text-primary md:text-2xl">
        <BiSolidCctv />
      </span>
    </a>
    <div class="flex items-center">
      <label class="btn btn-ghost drawer-button 2xl:invisible 2xl:hidden">
        <input type="checkbox" class="drawer-toggle" />
        <span class="text-lg md:text-xl">
          <BsLayoutTextSidebar />
        </span>
      </label>
    </div>
  </div>
  <main class="h-full w-full px-6 pt-2 2xl:px-0">
    <div class="drawer h-full 2xl:drawer-open">
      <input id="drawer-toggle" type="checkbox" class="drawer-toggle" />
      <div class="drawer-content lg:px-8">
        <div class="flex flex-col items-start">
          <div class="flex w-full flex-col gap-4">
            <div class="flex w-full items-center gap-4">
              <input type="week" id="week-input" class="input input-bordered" />
            </div>
            <div class="grid w-full grid-cols-2 gap-4 rounded-lg border p-4">
              <div class="flex flex-col gap-2">
                <div class="flex flex-col">
                  <h2 class="text-xl font-bold text-gray-800">
                    Weekly Traffic
                  </h2>
                  <span class="week-dates text-sm text-gray-500"
                    >Loading...</span
                  >
                </div>
                <div>
                  <canvas id="weekly-traffic"></canvas>
                </div>
              </div>
              <div class="flex flex-col gap-2">
                <div class="flex flex-col">
                  <h2 class="text-xl font-bold text-gray-800">
                    Weekly Accidents
                  </h2>
                  <span class="week-dates text-sm text-gray-500"
                    >Loading...</span
                  >
                </div>
                <div>
                  <canvas id="weekly-accidents"></canvas>
                </div>
              </div>
            </div>
          </div>
          <div class="divider divider-vertical"></div>
          <div class="flex w-full flex-col gap-4">
            <div class="flex w-full items-center gap-4">
              <input
                type="month"
                id="month-input"
                class="input input-bordered"
              />
            </div>
            <div class="grid w-full grid-cols-2 gap-4 rounded-lg border p-4">
              <div class="flex flex-col gap-2">
                <div class="flex flex-col">
                  <h2 class="text-xl font-bold text-gray-800">
                    Monthly Traffic
                  </h2>
                  <span class="month-dates text-sm text-gray-500"
                    >Loading...</span
                  >
                </div>
                <div>
                  <canvas id="monthly-traffic"></canvas>
                </div>
              </div>
              <div class="flex flex-col gap-2">
                <div class="flex flex-col">
                  <h2 class="text-xl font-bold text-gray-800">
                    Monthly Accidents
                  </h2>
                  <span class="month-dates text-sm text-gray-500"
                    >Loading...</span
                  >
                </div>
                <div>
                  <canvas id="monthly-accidents"></canvas>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="drawer-side 2xl:h-full">
        <label
          for="drawer-toggle"
          aria-label="close sidebar"
          class="drawer-overlay"
        >
        </label>
        <div class="h-full w-48 bg-base-200 py-2 2xl:rounded-tr-lg">
          <h2 class="mt-2 text-center text-xl font-bold">CCTV</h2>
          <ul class="menu rounded-box gap-1">
            <li class="font-bold">
              <button id="cctv-1" class="cctv-button">CCTV 1</button>
            </li>
            <li class="font-bold">
              <button id="cctv-2" class="cctv-button">CCTV 2</button>
            </li>
            <li class="font-bold">
              <button id="cctv-3" class="cctv-button">CCTV 3</button>
            </li>
            <li class="font-bold">
              <button id="cctv-4" class="cctv-button">CCTV 4</button>
            </li>
            <li class="font-bold">
              <button id="cctv-5" class="cctv-button">CCTV 5</button>
            </li>
            <li class="font-bold">
              <button id="cctv-6" class="cctv-button">CCTV 6</button>
            </li>
          </ul>
          <h2 class="mt-8 text-center text-xl font-bold">Options</h2>
          <ul class="rounded-box gap-1 px-2">
            <!-- <li>
              <select name="type" id="option">
                <option value="traffic">Traffic</option>
                <option value="accident">Accident</option>
              </select>
            </li> -->
          </ul>
        </div>
      </div>
    </div>
  </main>
  <script>
    import { Chart, type ChartItem, registerables } from "chart.js";
    Chart.register(...registerables);
    import * as DateUtils from "~/utils/date";
    import { fetchWithRange } from "~/data/statistics";

    let cctvId = new URLSearchParams(window.location.search).get("cctv");

    let weeklyTrafficChart: Chart;
    let weeklyAccidentsChart: Chart;
    let monthlyTrafficChart: Chart;
    let monthlyAccidentsChart: Chart;

    const initialWeek = DateUtils.getWeek(new Date());

    let weekStart = DateUtils.getWeekStart().toLocaleDateString();
    let weekEnd = DateUtils.getWeekEnd().toLocaleDateString();
    let monthStart = DateUtils.getMonthStart().toLocaleDateString();
    let monthEnd = DateUtils.getMonthEnd().toLocaleDateString();

    const weekInput = document.querySelector<HTMLInputElement>("#week-input")!;
    const monthInput =
      document.querySelector<HTMLInputElement>("#month-input")!;

    document.querySelector<HTMLInputElement>("#month-input")!.value = `${
      DateUtils.getMonthStart().getFullYear() +
      "-" +
      (DateUtils.getMonthStart().getMonth() + 1).toString().padStart(2, "0")
    }`;

    document.querySelector<HTMLInputElement>(
      "#week-input",
    )!.value = `${DateUtils.getWeekStart().getFullYear()}-W${DateUtils.getWeek(
      new Date(),
    )
      .toString()
      .padStart(2, "0")}`;

    console.log(document.querySelector<HTMLInputElement>("#week-input")!.value);

    document.querySelectorAll(".week-dates").forEach((element) => {
      element.textContent = `${weekStart} - ${weekEnd}`;
    });

    document.querySelectorAll(".month-dates").forEach((element) => {
      element.textContent = `${monthStart} - ${monthEnd}`;
    });

    monthInput.addEventListener("change", (event) => {
      const target = event.target as HTMLInputElement;
      const [year, month] = target.value.split("-").map((e) => parseInt(e));

      monthStart = new Date(year, month - 1, 1).toLocaleDateString();
      monthEnd = new Date(year, month, 0).toLocaleDateString();

      document.querySelectorAll(".month-dates").forEach((element) => {
        element.textContent = `${monthStart} - ${monthEnd}`;
      });

      setMonthlyChart(year, month - 1).catch((error) => {
        console.error(error);
      });
    });

    weekInput.addEventListener("change", (event) => {
      const target = event.target as HTMLInputElement;
      const [year, week] = target.value.split("-W").map((e) => parseInt(e));

      weekStart = DateUtils.getDateOfWeek(year, week).toLocaleDateString();
      weekEnd = new Date(
        DateUtils.getDateOfWeek(year, week).getTime() + 6 * 24 * 60 * 60 * 1000,
      ).toLocaleDateString();

      document.querySelectorAll(".week-dates").forEach((element) => {
        element.textContent = `${weekStart} - ${weekEnd}`;
      });

      setWeeklyChart(year, week).catch((error) => {
        console.error(error);
      });
    });

    monthInput!.value = `${
      DateUtils.getMonthStart().getFullYear() +
      "-" +
      (DateUtils.getMonthStart().getMonth() + 1).toString().padStart(2, "0")
    }`;

    weekInput!.value = `${DateUtils.getWeekStart().getFullYear()}-W${initialWeek
      .toString()
      .padStart(2, "0")}`;

    if (cctvId === null) {
      cctvId = "1";
      window.location.href = `${window.location.protocol}//${window.location.host}/statistics?cctv=${cctvId}`;
    }

    document.getElementById(`cctv-${cctvId}`)?.classList.add("active");

    document.querySelector<HTMLAnchorElement>(
      "#return-link",
    )!.href = `/cctv/room?name=${cctvId}`;

    document
      .querySelectorAll<HTMLButtonElement>(".cctv-button")
      .forEach((element) => {
        if (element.id == `cctv-${cctvId}`) {
          return;
        }

        const targetCCTV = element.id.at(-1);

        element.addEventListener("click", () => {
          window.location.href = `${window.location.protocol}//${window.location.host}/statistics?cctv=${targetCCTV}`;
        });
      });

    document.querySelectorAll<HTMLInputElement>(".drawer-toggle").forEach((e) =>
      e.addEventListener("change", (event) => {
        document
          .querySelectorAll<HTMLInputElement>(".drawer-toggle")
          .forEach((inner) => {
            inner.checked = e.checked;
          });
      }),
    );

    setWeeklyChart(
      DateUtils.getWeekStart().getFullYear(),
      DateUtils.getWeek(new Date()),
    ).catch((error) => {
      console.error(error);
    });

    setMonthlyChart(
      parseInt(monthInput!.value.split("-")[0], 10),
      parseInt(monthInput!.value.split("-")[1], 10),
    ).catch((error) => {
      console.error(error);
    });

    async function setWeeklyChart(year: number, week: number) {
      // const weekStart = DateUtils.getWeekStart();
      // const weekEnd = DateUtils.getWeekEnd();
      const weekStart = DateUtils.getDateOfWeek(year, week);
      const weekEnd = new Date(weekStart.getTime() + 6 * 24 * 60 * 60 * 1000);

      // fetch data from database
      const weeklyData = await fetchWithRange(
        cctvId!,
        weekStart,
        weekEnd,
        "log",
      );

      const processedWeeklyData = Array.from({ length: 7 }, (_, i) => {
        return {
          car: 0,
          truck: 0,
          bus: 0,
          person: 0,
          bike: 0,
        };
      });

      weeklyData.forEach((data) => {
        const day = data.time.getDay();

        processedWeeklyData[day].car += data.log.car ?? 0;
        processedWeeklyData[day].truck += data.log.truck ?? 0;
        processedWeeklyData[day].bus += data.log.bus ?? 0;
        processedWeeklyData[day].person += data.log.person ?? 0;
        processedWeeklyData[day].bike += data.log.bike ?? 0;
      });

      if (weeklyTrafficChart) {
        weeklyTrafficChart.destroy();
      }

      weeklyTrafficChart = new Chart(
        document.querySelector("#weekly-traffic") as ChartItem,
        {
          type: "line",
          data: {
            labels: processedWeeklyData.map(
              (_, index) => index + weekStart.getDate(),
            ),
            datasets: [
              {
                label: "Car Count",
                data: processedWeeklyData.map((data) => data.car),
                fill: false,
                borderColor: "rgb(75, 192, 192)",
                tension: 0.1,
              },
              {
                label: "Truck Count",
                data: processedWeeklyData.map((data) => data.truck),
                fill: false,
                borderColor: "rgb(255, 99, 132)",
                tension: 0.1,
              },
              {
                label: "Bus Count",
                data: processedWeeklyData.map((data) => data.bus),
                fill: false,
                borderColor: "rgb(54, 162, 235)",
                tension: 0.1,
              },
              {
                label: "Person Count",
                data: processedWeeklyData.map((data) => data.person),
                fill: false,
                borderColor: "rgb(255, 205, 86)",
                tension: 0.1,
              },
              {
                label: "Bike Count",
                data: processedWeeklyData.map((data) => data.bike),
                fill: false,
                borderColor: "rgb(153, 102, 255)",
                tension: 0.1,
              },
            ],
          },
          options: {
            scales: {
              y: {
                beginAtZero: true,
                suggestedMin: 10,
              },
            },
          },
        },
      );

      const weeklyAccidents = await fetchWithRange(
        cctvId!,
        weekStart,
        weekEnd,
        "accident",
      );

      const processedWeeklyAccidents = Array.from({ length: 7 }, (_, i) => {
        return {
          moderate: 0,
          accidents: 0,
        };
      });

      weeklyAccidents.forEach((data) => {
        const day = data.time.getDay();
        processedWeeklyAccidents[day].moderate += data.log.moderate ?? 0;
        processedWeeklyAccidents[day].accidents += data.log.severe ?? 0;
      });

      if (weeklyAccidentsChart) {
        weeklyAccidentsChart.destroy();
      }

      weeklyAccidentsChart = new Chart(
        document.querySelector("#weekly-accidents") as ChartItem,
        {
          type: "line",
          data: {
            labels: processedWeeklyAccidents.map(
              (_, index) => index + weekStart.getDate(),
            ),
            datasets: [
              {
                label: "Moderate Accidents",
                data: processedWeeklyAccidents.map((data) => data.moderate),
                fill: false,
                borderColor: "rgb(75, 192, 192)",
                tension: 0.1,
              },
              {
                label: "Severe Accidents",
                data: processedWeeklyAccidents.map((data) => data.accidents),
                fill: false,
                borderColor: "rgb(255, 99, 132)",
                tension: 0.1,
              },
            ],
          },
          options: {
            scales: {
              y: {
                beginAtZero: true,
                suggestedMin: 10,
              },
            },
          },
        },
      );
    }

    // This function sets graphs
    async function setMonthlyChart(year: number, month: number) {
      const monthStart = new Date(year, month - 1, 1);
      const monthEnd = new Date(year, month, 0);

      // fetch data from database
      const monthlyData = await fetchWithRange(
        cctvId!,
        monthStart,
        monthEnd,
        "log",
      );

      const processedMonthlyData = Array.from(
        { length: monthEnd.getDate() },
        (_, i) => {
          return {
            car: 0,
            truck: 0,
            bus: 0,
            person: 0,
            bike: 0,
          };
        },
      );

      monthlyData.forEach((data) => {
        const date = data.time.getDate();
        processedMonthlyData[date - 1].car += data.log.car ?? 0;
        processedMonthlyData[date - 1].truck += data.log.truck ?? 0;
        processedMonthlyData[date - 1].bus += data.log.bus ?? 0;
        processedMonthlyData[date - 1].person += data.log.person ?? 0;
        processedMonthlyData[date - 1].bike += data.log.bike ?? 0;
      });

      if (monthlyTrafficChart) {
        monthlyTrafficChart.destroy();
      }

      monthlyTrafficChart = new Chart(
        document.querySelector("#monthly-traffic") as ChartItem,
        {
          type: "line",
          data: {
            labels: processedMonthlyData.map((_, index) => index + 1),
            datasets: [
              {
                label: "Car Count",
                data: processedMonthlyData.map((data) => data.car),
                fill: false,
                borderColor: "rgb(75, 192, 192)",
                tension: 0.1,
              },
              {
                label: "Truck Count",
                data: processedMonthlyData.map((data) => data.truck),
                fill: false,
                borderColor: "rgb(255, 99, 132)",
                tension: 0.1,
              },
              {
                label: "Bus Count",
                data: processedMonthlyData.map((data) => data.bus),
                fill: false,
                borderColor: "rgb(54, 162, 235)",
                tension: 0.1,
              },
              {
                label: "Person Count",
                data: processedMonthlyData.map((data) => data.person),
                fill: false,
                borderColor: "rgb(255, 205, 86)",
                tension: 0.1,
              },
              {
                label: "Bike Count",
                data: processedMonthlyData.map((data) => data.bike),
                fill: false,
                borderColor: "rgb(153, 102, 255)",
                tension: 0.1,
              },
            ],
          },
          options: {
            scales: {
              y: {
                beginAtZero: true,
                suggestedMin: 10,
              },
            },
          },
        },
      );

      const monthlyAccidents = await fetchWithRange(
        cctvId!,
        monthStart,
        monthEnd,
        "accident",
      );

      const processedMonthlyAccidents = Array.from(
        { length: monthEnd.getDate() },
        (_, i) => {
          return {
            moderate: 0,
            accidents: 0,
          };
        },
      );

      monthlyAccidents.forEach((data) => {
        const date = data.time.getDate();
        processedMonthlyAccidents[date - 1].moderate += data.log.moderate ?? 0;
        processedMonthlyAccidents[date - 1].accidents += data.log.severe ?? 0;
      });

      if (monthlyAccidentsChart) {
        monthlyAccidentsChart.destroy();
      }

      monthlyAccidentsChart = new Chart(
        document.querySelector("#monthly-accidents") as ChartItem,
        {
          type: "line",
          data: {
            labels: processedMonthlyAccidents.map((_, index) => index + 1),
            datasets: [
              {
                label: "Moderate Accidents",
                data: processedMonthlyAccidents.map((data) => data.moderate),
                fill: false,
                borderColor: "rgb(75, 192, 192)",
                tension: 0.1,
              },
              {
                label: "Severe Accidents",
                data: processedMonthlyAccidents.map((data) => data.accidents),
                fill: false,
                borderColor: "rgb(255, 99, 132)",
                tension: 0.1,
              },
            ],
          },
          options: {
            scales: {
              y: {
                beginAtZero: true,
                suggestedMin: 10,
              },
            },
          },
        },
      );
    }

    // const dateFromElement =
    //   document.querySelector<HTMLInputElement>("#date-from");
    // const dateToElement = document.querySelector<HTMLInputElement>("#date-to");
    // const dateForm = document.querySelector<HTMLFormElement>("#date-form");
    // dateFromElement?.addEventListener("change", (event) => {
    //   const target = event.target as HTMLInputElement;
    //   const newDate = new Date(target.value);
    //   dateToElement?.classList.remove("input-error");
    //   if (checkDate(newDate, dateTo)) {
    //     dateFrom = newDate;
    //     dateFromElement.classList.remove("input-error");
    //     onDateFormChange();
    //   } else {
    //     dateFromElement.value = dateFrom
    //       ? dateFrom.toISOString().split("T")[0]
    //       : "";
    //     dateFromElement.classList.add("input-error");
    //   }
    // });
    // dateToElement?.addEventListener("change", (event) => {
    //   const target = event.target as HTMLInputElement;
    //   const newDate = new Date(target.value);
    //   dateFromElement?.classList.remove("input-error");
    //   if (checkDate(dateFrom, newDate)) {
    //     dateTo = newDate;
    //     dateToElement.classList.remove("input-error");
    //     onDateFormChange();
    //   } else {
    //     dateToElement.value = dateTo ? dateTo.toISOString().split("T")[0] : "";
    //     dateToElement.classList.add("input-error");
    //   }
    // });
    // function checkDate(from: Date, to: Date) {
    //   if (from > to) {
    //     return false;
    //   }
    //   return true;
    // }
    // function onDateFormChange() {
    //   if (dateFrom !== undefined && dateTo !== undefined) {
    //     // dateForm?.submit();
    //   }
    // }
  </script>
</Layout>
